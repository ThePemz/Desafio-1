int botInicio = 2, botMostrar = 4; //Variables para identificar donde entran los pines de los botones.


//Variables para el almacenaje dinamico de datos.
int datoPos = 500; //Cantidad de datos maximos posibles a guardar segun la memoria.
int* datos; //inicializacion de array dinamico para el almacenaje de datos.
int tamanoArray = 10, cantDato = 0; //Auxiliares para el manejo del arreglo.


int min = 0, max = 0, amplitud = 0, frecuencia = 0; //Declaracion de variables para el almacenaje de valores hallados.


int saltoDato = 0; //Variables auxiliares.


unsigned long tiempo; //Variable para almacenar el tiempo actual.


void setup() {
  //Definicion de modo de los pines de entrada.
  pinMode(botInicio, INPUT);
  pinMode(botMostrar, INPUT);
  
  delay(2000); //Tiempo estimado mientras toda la electronica incia y las señales se estabilizan.
  
  datos = new int[tamañoArray]; //Dimensionar el arreglo.
}

void loop() {
  
  if(saltoDato == (33203/datoPos)){
    int valor = anologRead(A0);
    procesarDato(valor);
    saltoDato = 0;
  }
  
  saltoDato++;
  
}

//Función para procesar la señal y almacenar en el array dinámico.
void procesarDato(int valor) {
  //Si llenamos todos los datos disponibles del array.
  if(tamanoArray == datoPos){
    // Desplazar todos los elementos una posición hacia la izquierda.
  	for (int i = 0; i < tamanoArray - 1; i++) {
    	datos[i] = datos[i + 1];
  	}

    cantDato--;
  }
  
  //Si el número de muestras supera el tamaño del array, redimensionarlo.
  if(cantDato >= tamanoArray) {
      reestructurar();
  }
  
  datos[cantDato] = valor;  //Guardar valor de la señal en el array.

  cantDato++;
}

//Función para redimensionar el array dinámico.
void reestructurar() {
  
  //Si el número de muestras supera la cota de memoria disponible.
  if(tamañoArray * 2 >= datoPos){
  	tamanoArray = datoPos;
  }else{
  	tamonoArray *= 2; //Aumentar el arreglo de uno en uno.
  }
  
  int* auxArray = new int[tamanoArray]; //Crear nuevo array auxiliar más grande.
  
  //Copiar datos del array antiguo al nuevo.
  for (int i = 0; i < cantDato; i++) {
    auxArray[i] = datos[i];
  }
  
  delete[] datos; //Liberar la memoria antigua.
  
  //Asignar el nuevo array al puntero original.
  datos = auxArray;
}

//Función para reiniciar los datos de la señal
void resetData() {
  cantDatos=0;
  frecuencia=0;
  amplitud=0;
}